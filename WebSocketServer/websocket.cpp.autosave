#include "websocket.h"
#include "QtWebSockets/qwebsocketserver.h"
#include "QtWebSockets/qwebsocket.h"
#include <QDebug>
QT_USE_NAMESPACE

QString xmlMess = "<root><Parametr1><Parametr7>hi</Parametr7></Parametr1><Parametr2>hello</Parametr2><Parametr3><Parametr4><Parametr5><Parametr6></Parametr6></Parametr5></Parametr4></Parametr3></root>";

Websocket::Websocket(quint16 port, QObject *parent) :
    QObject(parent),
    m_pWebSocketServer(new QWebSocketServer(QStringLiteral("Echo Server"),
                                            QWebSocketServer::NonSecureMode, this)),
    m_clients()
{
    if (m_pWebSocketServer->listen(QHostAddress::Any, port)) {
        connect(m_pWebSocketServer, &QWebSocketServer::newConnection,
                this, &Websocket::onNewConnection);
        connect(m_pWebSocketServer, &QWebSocketServer::closed, this, &Websocket::closed);
    }
}
Websocket::~Websocket()
{
    m_pWebSocketServer->close();
    qDeleteAll(m_clients.begin(), m_clients.end());
}
void Websocket::onNewConnection()
{
    QWebSocket *pSocket = m_pWebSocketServer->nextPendingConnection();
    //connect(pSocket, &QWebSocket::textMessageReceived, this, &Websocket::processTextMessage);
    connect(pSocket, &QWebSocket::textMessageReceived, this, &Websocket::processTextMessage);
    
    connect(pSocket, &QWebSocket::binaryMessageReceived, this, &Websocket::processBinaryMessage);
    connect(pSocket, &QWebSocket::disconnected, this, &Websocket::socketDisconnected);

    m_clients << pSocket;
}

void Websocket::processTextMessage(QString message)
{
    QWebSocket *pClient = qobject_cast<QWebSocket *>(sender());
    if (pClient) {
            pClient->sendTextMessage(xmlMess);
    }
}
void Websocket::processBinaryMessage(QByteArray message)
{
    QWebSocket *pClient = qobject_cast<QWebSocket *>(sender());
    if (pClient) {
        pClient->sendBinaryMessage(message);
    }
}

void Websocket::socketDisconnected()
{
    QWebSocket *pClient = qobject_cast<QWebSocket *>(sender());
    if (pClient) {
        m_clients.removeAll(pClient);
        pClient->deleteLater();
    }
}
